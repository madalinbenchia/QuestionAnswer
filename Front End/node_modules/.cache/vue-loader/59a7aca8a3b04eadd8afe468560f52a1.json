{"remainingRequest":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\src\\components\\Feed\\Qanswer.vue?vue&type=template&id=9b8fcde4&","dependencies":[{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\src\\components\\Feed\\Qanswer.vue","mtime":1615718057841},{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615717989082},{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615718052517},{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615717989082},{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\vue-loader\\lib\\index.js","mtime":1615718052515}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}