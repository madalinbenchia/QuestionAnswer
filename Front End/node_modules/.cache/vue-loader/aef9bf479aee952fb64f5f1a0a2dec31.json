{"remainingRequest":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\laragon\\www\\QA\\src\\views\\Components\\Cards.vue?vue&type=template&id=53c45244&","dependencies":[{"path":"D:\\laragon\\www\\QA\\src\\views\\Components\\Cards.vue","mtime":1610219306334},{"path":"D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}