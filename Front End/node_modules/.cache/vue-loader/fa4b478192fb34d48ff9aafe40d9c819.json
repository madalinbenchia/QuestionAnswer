{"remainingRequest":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\laragon\\www\\QA\\src\\views\\Examples\\QuestionManagement\\ViewQuestion.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\laragon\\www\\QA\\src\\views\\Examples\\QuestionManagement\\ViewQuestion.vue","mtime":1612032949194},{"path":"D:\\laragon\\www\\QA\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZ3JlZW5DbGFzcyB7CiAgY29sb3I6IHJnYig3OSwgMjMwLCA3OSk7Cn0K"},{"version":3,"sources":["ViewQuestion.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoTA;AACA;AACA","file":"ViewQuestion.vue","sourceRoot":"src/views/Examples/QuestionManagement","sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row\"> \r\n      <div class=\"col-xl-12 order-xl-1\">\r\n        <div slot=\"empty\" v-if=\"loading\">\r\n          <img src=\"/img/loading.gif\" style=\"height: 100px; width: 100px\" />\r\n        </div>\r\n        <div v-else>\r\n          {{this.questionOwner}}\r\n         <div style=\"margin-top:150px;\">\r\n            <el-tooltip content=\"This question is useful\" placement=\"top\">\r\n              <i\r\n                style=\"cursor:pointer; margin-left: 8px;font-size: 200%\"\r\n                class=\"fas fa-chevron-up\"\r\n                @click=\"UpVote(question.Id)\"\r\n              ></i>\r\n              </el-tooltip>\r\n            </div>\r\n            <h1 v-if=\"question.Score > 99\" style=\"margin-left:8px; color:gray\">\r\n              {{ question.Score }}\r\n            </h1>\r\n            <h1\r\n              v-else-if=\"question.Score > 9\"\r\n              style=\"margin-left:9px; color:gray\"\r\n            >\r\n              {{ question.Score }}\r\n            </h1>\r\n            <h1\r\n              v-else-if=\"question.Score <= 9\"\r\n              style=\"margin-left:15px;color:gray\"\r\n            >\r\n              {{ question.Score }}\r\n            </h1>\r\n             <div style=\"margin-top:10px;\">\r\n                <el-tooltip content=\"This question is not useful\" placement=\"bottom\">\r\n              <i\r\n                style=\"margin-left: 8px;font-size: 200%; cursor:pointer;\"\r\n                class=\"fas fa-chevron-down\"\r\n                @click=\"DownVote(question.Id)\"\r\n              ></i>\r\n                </el-tooltip>\r\n            </div>\r\n          </div>\r\n\r\n          <card\r\n            class=\"no-border-card\"\r\n            body-classes=\"px-4 pb-2\"\r\n            footer-classes=\"pb-2\"\r\n            style=\"margin-left:80px ;margin-top:-220px\"\r\n          >\r\n            <h2 slot=\"header\" class=\"h2 mb-0\">{{ question.Title }}</h2>\r\n\r\n            <div\r\n              slot=\"header\"\r\n              style=\"white-space: nowrap; width: 100px;\"\r\n              class=\"d-flex justify-content-between mt-2\"\r\n            >\r\n              <p slot=\"header\" class=\"mr-4\">\r\n                Asked <i>{{ this.askedTimeAgo }}</i> by  <b style=\"cursor:pointer\" @click=\"viewUser(questionOwner.UserId)\">{{this.questionOwner.DisplayName}}</b>\r\n              </p>\r\n            </div>\r\n            \r\n            <p class=\"card-text mb-4\" v-html=\"question.Body\"></p>\r\n            <span\r\n              v-for=\"tag in question.Tags.split('<')\"\r\n              :key=\"tag.id\"\r\n              class=\"badge badge-default mr-1\"\r\n              >{{ tag.slice(0, -1) }}</span\r\n            >\r\n          </card>\r\n          <h1 style=\"margin-left:80px; margin-bottom:40px\">\r\n            {{ question.AnswersList.length }} Answers\r\n          </h1>\r\n         \r\n          <div v-for=\"(answer,index) in question.AnswersList\" :key=\"answer.Id\">\r\n              <qanswer v-bind:index=\"index\" \r\n              v-bind:answer=\"answer\"\r\n              v-bind:question=\"question\">\r\n              </qanswer>\r\n          </div>\r\n\r\n          <h1 style=\"margin-left:80px; margin-bottom:40px\">\r\n            Your Answer\r\n          </h1>\r\n\r\n          <form ref=\"profile_form\" @submit.prevent=\"handleSubmit\">\r\n            <html-editor\r\n              v-model=\"answ.Body\"\r\n              name=\"editor\"\r\n              style=\"margin-left:80px;\"\r\n            />\r\n            <base-button\r\n              native-type=\"submit\"\r\n              type=\"button\"\r\n              class=\"btn btn-primary\"\r\n              style=\"margin-left:80px;\"\r\n              >Post Your Answer</base-button\r\n            >\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport BaseInput from \"@/components/Inputs/BaseInput.vue\";\r\nimport BaseButton from \"@/components/BaseButton.vue\";\r\nimport ValidationError from \"@/components/ValidationError.vue\";\r\nimport { Select, Option, Tooltip } from \"element-ui\";\r\nimport formMixin from \"@/mixins/form-mixin\";\r\nimport moment from \"moment\";\r\nimport HtmlEditor from \"@/components/Inputs/HtmlEditor\";\r\nimport Comment from '@/components/Feed/Comment';\r\nimport Qanswer from '@/components/Feed/Qanswer';\r\n\r\nexport default {\r\n  layout: \"DashboardLayout\",\r\n\r\n  components: {\r\n    BaseInput,\r\n    BaseButton,\r\n    ValidationError,\r\n    [Select.name]: Select,\r\n    [Option.name]: Option,\r\n    [Tooltip.name]: Tooltip,\r\n    HtmlEditor,\r\n    Comment,\r\n    Qanswer,\r\n  },\r\n  mixins: [formMixin],\r\n\r\n  data() {\r\n    return {\r\n      user:null,\r\n      vote:null,\r\n      loading: true,\r\n      askedTimeAgo: null,\r\n      activityTimeAgo: null,\r\n      questionOwner: \"\",\r\n      oaloading:true,\r\n      qowner:\"\",\r\n      question: {\r\n        Body: \"\",\r\n        Tags: \"\",\r\n        Title: \"\",\r\n        OwneruserId: \"\",\r\n        AcceptedAnswerId: \"\",\r\n        AnswersList: []\r\n      },\r\n      answ: {\r\n        Body: \"\",\r\n        OwnerUserId: \"\",\r\n        ParentId: \"\"\r\n      },\r\n      comment: {\r\n        PostId:  \"\",\r\n        Text: \"\",\r\n        UserId: \"\"\r\n      },\r\n      comm: [],\r\n    };\r\n  },\r\n\r\n  created() {\r\n    this.get();\r\n    },\r\n  \r\n  methods: {\r\n   \r\n    async UpVote(id) {\r\n      let v = {  \"PostId\": id,\r\n                 \"UserId\": this.user.UserId,\r\n                 \"VoteTypeId\": \"2\" };\r\n\r\n      await this.$store.dispatch(\"questions/vote\", v);\r\n\r\n      const QuestionId = this.$route.params.id;\r\n\r\n      await this.$store.dispatch(\"questions/get\", QuestionId);\r\n      this.question = this.$store.getters[\"questions/question\"];\r\n    },\r\n\r\n      async DownVote(id) {\r\n      let v = {  \"PostId\": id,\r\n                 \"UserId\": this.user.UserId,\r\n                 \"VoteTypeId\": \"3\" };\r\n\r\n      await this.$store.dispatch(\"questions/vote\", v);\r\n      const QuestionId = this.$route.params.id;\r\n      await this.$store.dispatch(\"questions/get\", QuestionId);\r\n      this.question = this.$store.getters[\"questions/question\"];\r\n    },\r\n\r\n    async get() {\r\n      try {\r\n        this.user = await { ... this.$store.getters.currentUser };\r\n        const id = this.$route.params.id;\r\n        await this.$store.dispatch(\"questions/get\", id);\r\n        this.question = this.$store.getters[\"questions/question\"];\r\n        this.loading = false;\r\n\r\n\r\n        const questionOwnerId = this.question.OwnerUserId;\r\n   \r\n        await this.$store.dispatch(\"users/get\", questionOwnerId);\r\n        this.questionOwner = await { ...this.$store.getters[\"users/user\"] };\r\n\r\n        this.askedTimeAgo = moment(this.question.CreationDate).fromNow();\r\n        this.activityTimeAgo = moment(this.question.LastActivityDate).fromNow();\r\n      } catch (error) {\r\n        console.log(error)\r\n        this.$notify({\r\n          type: \"danger\",\r\n          message: `Oops, something went wrong!`\r\n        });\r\n      }\r\n    },\r\n     \r\n\r\n    format_date(value) {\r\n      if (value) {\r\n        return moment(String(value)).format(\"MMM D 'YY, h:mm\");\r\n      }\r\n    },\r\n\r\n    async handleSubmit() {\r\n      try {\r\n        this.answ.OwnerUserId = this.user.UserId;\r\n        this.answ.ParentId = this.question.Id;\r\n        this.answ.LastEditorDisplayName = this.user.DisplayName;\r\n        await this.$store.dispatch(\"answers/add\", this.answ);\r\n       \r\n\r\n        const QuestionId = this.$route.params.id;\r\n        await this.$store.dispatch(\"questions/get\", QuestionId);\r\n        this.question = this.$store.getters[\"questions/question\"];\r\n\r\n        this.answ.Body=\"\";\r\n\r\n        this.$notify({\r\n          type: \"success\",\r\n          message: \"Answer added successfully.\"\r\n        });\r\n     \r\n      } catch (error) {\r\n        this.$notify({\r\n          type: \"danger\",\r\n          message: \"Oops, something went wrong!\"\r\n        });\r\n      }\r\n    },\r\n\r\n    async addComment(id, index) {\r\n      try {\r\n        console.log(index)\r\n       let c = {  \"PostId\": id,\r\n                  \"Text\" : this.comm[index],\r\n                 \"UserId\": this.user.UserId,\r\n                };\r\n\r\n      await this.$store.dispatch(\"questions/comment\", c);\r\n\r\n      const QuestionId = this.$route.params.id;\r\n      this.comm[index]=\"\";\r\n\r\n      await this.$store.dispatch(\"questions/get\", QuestionId);\r\n      this.question = this.$store.getters[\"questions/question\"];\r\n\r\n        this.$notify({\r\n          type: \"success\",\r\n          message: \"Comment added successfully.\"\r\n        });\r\n     \r\n      } catch (error) {\r\n        console.log(error)\r\n        this.$notify({\r\n          type: \"danger\",\r\n          message: \"Oops, something went wrong!\"\r\n        });\r\n      }\r\n    },\r\n\r\n    goBack() {\r\n      this.$router.push({ name: \"List Questions\" });\r\n    },\r\n\r\n     async viewUser(Id) {\r\n      this.$router.push({\r\n        name: \"View User\",\r\n        params: { id: Id }\r\n      });\r\n    },\r\n\r\n      async correctAnswer(Id) {\r\n\r\n        this.question.AcceptedAnswerId = Id;\r\n        this.question.LastEditorDisplayName =this.questionOwner.DisplayName;\r\n        this.question.CloseDate=\"2011-01-01T02:11:46.083\";\r\n        await this.$store.dispatch(\"questions/update\", this.question);\r\n        var element = document.getElementById(Id);\r\n        element.classList.add('greenClass');\r\n        await this.$store.dispatch(\"questions/get\", QuestionId);\r\n        this.question = this.$store.getters[\"questions/question\"];\r\n    },\r\n  }\r\n};\r\n</script>\r\n<style>\r\n  .greenClass {\r\n    color: rgb(79, 230, 79);\r\n  }\r\n</style>\r\n"]}]}