{"remainingRequest":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\src\\views\\Examples\\UserProfile.vue?vue&type=template&id=724d99b2&","dependencies":[{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\src\\views\\Examples\\UserProfile.vue","mtime":1615747416772},{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615717989082},{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1615718052517},{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615717989082},{"path":"D:\\Cursuri\\sem2\\Programare cu aspecte\\QuestionAnswer\\Front End\\node_modules\\vue-loader\\lib\\index.js","mtime":1615718052515}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}