{"remainingRequest":"D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\src\\views\\Dashboard\\ActivityFeed.vue?vue&type=template&id=0ee063c2&","dependencies":[{"path":"D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\src\\views\\Dashboard\\ActivityFeed.vue","mtime":1599650740918},{"path":"D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\vue-argon-dashboard-pro-json-api\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}