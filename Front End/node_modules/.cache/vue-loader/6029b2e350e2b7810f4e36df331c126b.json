{"remainingRequest":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\laragon\\www\\QA\\src\\views\\Layout\\DashboardLayout.vue?vue&type=template&id=21006813&","dependencies":[{"path":"D:\\laragon\\www\\QA\\src\\views\\Layout\\DashboardLayout.vue","mtime":1611339712665},{"path":"D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}