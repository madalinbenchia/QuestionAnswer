{"remainingRequest":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\laragon\\www\\QA\\src\\views\\Components\\Icons.vue?vue&type=template&id=0f7f0a7b&","dependencies":[{"path":"D:\\laragon\\www\\QA\\src\\views\\Components\\Icons.vue","mtime":1609358850029},{"path":"D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\laragon\\www\\QA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    [
      _c("base-header", { staticClass: "pb-6" }, [
        _c("div", { staticClass: "row align-items-center py-4" }, [
          _c("div", { staticClass: "col-lg-6 col-7" }, [
            _c("h6", { staticClass: "h2 text-white d-inline-block mb-0" }, [
              _vm._v(_vm._s(_vm.$route.name))
            ]),
            _c(
              "nav",
              {
                staticClass: "d-none d-md-inline-block ml-md-4",
                attrs: { "aria-label": "breadcrumb" }
              },
              [_c("route-breadcrumb")],
              1
            )
          ]),
          _c(
            "div",
            { staticClass: "col-lg-6 col-5 text-right" },
            [
              _c("base-button", { attrs: { size: "sm", type: "neutral" } }, [
                _vm._v("New")
              ]),
              _c("base-button", { attrs: { size: "sm", type: "neutral" } }, [
                _vm._v("Filters")
              ])
            ],
            1
          )
        ])
      ]),
      _c("div", { staticClass: "container-fluid mt--6" }, [
        _c("div", { staticClass: "row justify-content-center" }, [
          _c(
            "div",
            { staticClass: "col-lg-8" },
            [
              _c("card", { attrs: { "header-classes": "bg-transparent" } }, [
                _c(
                  "h3",
                  {
                    staticClass: "mb-0",
                    attrs: { slot: "header" },
                    slot: "header"
                  },
                  [_vm._v("Icons")]
                ),
                _c("div", { staticClass: "row icon-examples" }, [
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-active-40",
                            expression: "'ni ni-active-40'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-active-40" }),
                          _c("span", [_vm._v("active-40")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-air-baloon",
                            expression: "'ni ni-air-baloon'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-air-baloon" }),
                          _c("span", [_vm._v("air-baloon")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-album-2",
                            expression: "'ni ni-album-2'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-album-2" }),
                          _c("span", [_vm._v("album-2")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-align-center",
                            expression: "'ni ni-align-center'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-align-center" }),
                          _c("span", [_vm._v("align-center")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-align-left-2",
                            expression: "'ni ni-align-left-2'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-align-left-2" }),
                          _c("span", [_vm._v("align-left-2")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-ambulance",
                            expression: "'ni ni-ambulance'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-ambulance" }),
                          _c("span", [_vm._v("ambulance")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-app",
                            expression: "'ni ni-app'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-app" }),
                          _c("span", [_vm._v("app")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-archive-2",
                            expression: "'ni ni-archive-2'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-archive-2" }),
                          _c("span", [_vm._v("archive-2")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-atom",
                            expression: "'ni ni-atom'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-atom" }),
                          _c("span", [_vm._v("atom")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-badge",
                            expression: "'ni ni-badge'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-badge" }),
                          _c("span", [_vm._v("badge")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bag-17",
                            expression: "'ni ni-bag-17'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bag-17" }),
                          _c("span", [_vm._v("bag-17")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-basket",
                            expression: "'ni ni-basket'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-basket" }),
                          _c("span", [_vm._v("basket")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bell-55",
                            expression: "'ni ni-bell-55'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bell-55" }),
                          _c("span", [_vm._v("bell-55")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bold-down",
                            expression: "'ni ni-bold-down'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bold-down" }),
                          _c("span", [_vm._v("bold-down")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bold-left",
                            expression: "'ni ni-bold-left'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bold-left" }),
                          _c("span", [_vm._v("bold-left")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bold-right",
                            expression: "'ni ni-bold-right'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bold-right" }),
                          _c("span", [_vm._v("bold-right")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bold-up",
                            expression: "'ni ni-bold-up'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bold-up" }),
                          _c("span", [_vm._v("bold-up")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bold",
                            expression: "'ni ni-bold'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bold" }),
                          _c("span", [_vm._v("bold")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-book-bookmark",
                            expression: "'ni ni-book-bookmark'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-book-bookmark" }),
                          _c("span", [_vm._v("book-bookmark")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-books",
                            expression: "'ni ni-books'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-books" }),
                          _c("span", [_vm._v("books")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-box-2",
                            expression: "'ni ni-box-2'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-box-2" }),
                          _c("span", [_vm._v("box-2")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-briefcase-24",
                            expression: "'ni ni-briefcase-24'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-briefcase-24" }),
                          _c("span", [_vm._v("briefcase-24")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-building",
                            expression: "'ni ni-building'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-building" }),
                          _c("span", [_vm._v("building")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bulb-61",
                            expression: "'ni ni-bulb-61'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bulb-61" }),
                          _c("span", [_vm._v("bulb-61")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bullet-list-67",
                            expression: "'ni ni-bullet-list-67'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bullet-list-67" }),
                          _c("span", [_vm._v("bullet-list-67")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-bus-front-12",
                            expression: "'ni ni-bus-front-12'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-bus-front-12" }),
                          _c("span", [_vm._v("bus-front-12")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-button-pause",
                            expression: "'ni ni-button-pause'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-button-pause" }),
                          _c("span", [_vm._v("button-pause")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-button-play",
                            expression: "'ni ni-button-play'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-button-play" }),
                          _c("span", [_vm._v("button-play")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-button-power",
                            expression: "'ni ni-button-power'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-button-power" }),
                          _c("span", [_vm._v("button-power")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-calendar-grid-58",
                            expression: "'ni ni-calendar-grid-58'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-calendar-grid-58" }),
                          _c("span", [_vm._v("calendar-grid-58")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-camera-compact",
                            expression: "'ni ni-camera-compact'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-camera-compact" }),
                          _c("span", [_vm._v("camera-compact")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-caps-small",
                            expression: "'ni ni-caps-small'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-caps-small" }),
                          _c("span", [_vm._v("caps-small")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-cart",
                            expression: "'ni ni-cart'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-cart" }),
                          _c("span", [_vm._v("cart")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-chart-bar-32",
                            expression: "'ni ni-chart-bar-32'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-chart-bar-32" }),
                          _c("span", [_vm._v("chart-bar-32")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-chart-pie-35",
                            expression: "'ni ni-chart-pie-35'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-chart-pie-35" }),
                          _c("span", [_vm._v("chart-pie-35")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-chat-round",
                            expression: "'ni ni-chat-round'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-chat-round" }),
                          _c("span", [_vm._v("chat-round")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-check-bold",
                            expression: "'ni ni-check-bold'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-check-bold" }),
                          _c("span", [_vm._v("check-bold")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-circle-08",
                            expression: "'ni ni-circle-08'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-circle-08" }),
                          _c("span", [_vm._v("circle-08")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-cloud-download-95",
                            expression: "'ni ni-cloud-download-95'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-cloud-download-95" }),
                          _c("span", [_vm._v("cloud-download-95")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-cloud-upload-96",
                            expression: "'ni ni-cloud-upload-96'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-cloud-upload-96" }),
                          _c("span", [_vm._v("cloud-upload-96")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-compass-04",
                            expression: "'ni ni-compass-04'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-compass-04" }),
                          _c("span", [_vm._v("compass-04")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-controller",
                            expression: "'ni ni-controller'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-controller" }),
                          _c("span", [_vm._v("controller")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-credit-card",
                            expression: "'ni ni-credit-card'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-credit-card" }),
                          _c("span", [_vm._v("credit-card")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-curved-next",
                            expression: "'ni ni-curved-next'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-curved-next" }),
                          _c("span", [_vm._v("curved-next")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-delivery-fast",
                            expression: "'ni ni-delivery-fast'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-delivery-fast" }),
                          _c("span", [_vm._v("delivery-fast")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-diamond",
                            expression: "'ni ni-diamond'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-diamond" }),
                          _c("span", [_vm._v("diamond")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-email-83",
                            expression: "'ni ni-email-83'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-email-83" }),
                          _c("span", [_vm._v("email-83")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-fat-add",
                            expression: "'ni ni-fat-add'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-fat-add" }),
                          _c("span", [_vm._v("fat-add")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-fat-delete",
                            expression: "'ni ni-fat-delete'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-fat-delete" }),
                          _c("span", [_vm._v("fat-delete")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-fat-remove",
                            expression: "'ni ni-fat-remove'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-fat-remove" }),
                          _c("span", [_vm._v("fat-remove")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-favourite-28",
                            expression: "'ni ni-favourite-28'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-favourite-28" }),
                          _c("span", [_vm._v("favourite-28")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-folder-17",
                            expression: "'ni ni-folder-17'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-folder-17" }),
                          _c("span", [_vm._v("folder-17")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-glasses-2",
                            expression: "'ni ni-glasses-2'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-glasses-2" }),
                          _c("span", [_vm._v("glasses-2")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-hat-3",
                            expression: "'ni ni-hat-3'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-hat-3" }),
                          _c("span", [_vm._v("hat-3")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-headphones",
                            expression: "'ni ni-headphones'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-headphones" }),
                          _c("span", [_vm._v("headphones")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-html5",
                            expression: "'ni ni-html5'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-html5" }),
                          _c("span", [_vm._v("html5")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-istanbul",
                            expression: "'ni ni-istanbul'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-istanbul" }),
                          _c("span", [_vm._v("istanbul")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-circle-08",
                            expression: "'ni ni-circle-08'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-circle-08" }),
                          _c("span", [_vm._v("circle-08")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-key-25",
                            expression: "'ni ni-key-25'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-key-25" }),
                          _c("span", [_vm._v("key-25")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-laptop",
                            expression: "'ni ni-laptop'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-laptop" }),
                          _c("span", [_vm._v("laptop")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-like-2",
                            expression: "'ni ni-like-2'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-like-2" }),
                          _c("span", [_vm._v("like-2")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-lock-circle-open",
                            expression: "'ni ni-lock-circle-open'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-lock-circle-open" }),
                          _c("span", [_vm._v("lock-circle-open")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-map-big",
                            expression: "'ni ni-map-big'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-map-big" }),
                          _c("span", [_vm._v("map-big")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-mobile-button",
                            expression: "'ni ni-mobile-button'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-mobile-button" }),
                          _c("span", [_vm._v("mobile-button")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-money-coins",
                            expression: "'ni ni-money-coins'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-money-coins" }),
                          _c("span", [_vm._v("money-coins")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-note-03",
                            expression: "'ni ni-note-03'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-note-03" }),
                          _c("span", [_vm._v("note-03")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-notification-70",
                            expression: "'ni ni-notification-70'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-notification-70" }),
                          _c("span", [_vm._v("notification-70")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-palette",
                            expression: "'ni ni-palette'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-palette" }),
                          _c("span", [_vm._v("palette")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-paper-diploma",
                            expression: "'ni ni-paper-diploma'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-paper-diploma" }),
                          _c("span", [_vm._v("paper-diploma")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-pin-3",
                            expression: "'ni ni-pin-3'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-pin-3" }),
                          _c("span", [_vm._v("pin-3")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-planet",
                            expression: "'ni ni-planet'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-planet" }),
                          _c("span", [_vm._v("planet")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-ruler-pencil",
                            expression: "'ni ni-ruler-pencil'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-ruler-pencil" }),
                          _c("span", [_vm._v("ruler-pencil")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-satisfied",
                            expression: "'ni ni-satisfied'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-satisfied" }),
                          _c("span", [_vm._v("satisfied")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-scissors",
                            expression: "'ni ni-scissors'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-scissors" }),
                          _c("span", [_vm._v("scissors")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-send",
                            expression: "'ni ni-send'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-send" }),
                          _c("span", [_vm._v("send")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-settings-gear-65",
                            expression: "'ni ni-settings-gear-65'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-settings-gear-65" }),
                          _c("span", [_vm._v("settings-gear-65")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-settings",
                            expression: "'ni ni-settings'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-settings" }),
                          _c("span", [_vm._v("settings")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-single-02",
                            expression: "'ni ni-single-02'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-single-02" }),
                          _c("span", [_vm._v("single-02")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-single-copy-04",
                            expression: "'ni ni-single-copy-04'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-single-copy-04" }),
                          _c("span", [_vm._v("single-copy-04")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-sound-wave",
                            expression: "'ni ni-sound-wave'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-sound-wave" }),
                          _c("span", [_vm._v("sound-wave")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-spaceship",
                            expression: "'ni ni-spaceship'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-spaceship" }),
                          _c("span", [_vm._v("spaceship")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-square-pin",
                            expression: "'ni ni-square-pin'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-square-pin" }),
                          _c("span", [_vm._v("square-pin")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-support-16",
                            expression: "'ni ni-support-16'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-support-16" }),
                          _c("span", [_vm._v("support-16")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-tablet-button",
                            expression: "'ni ni-tablet-button'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-tablet-button" }),
                          _c("span", [_vm._v("tablet-button")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-tag",
                            expression: "'ni ni-tag'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-tag" }),
                          _c("span", [_vm._v("tag")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-tie-bow",
                            expression: "'ni ni-tie-bow'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-tie-bow" }),
                          _c("span", [_vm._v("tie-bow")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-time-alarm",
                            expression: "'ni ni-time-alarm'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-time-alarm" }),
                          _c("span", [_vm._v("time-alarm")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-trophy",
                            expression: "'ni ni-trophy'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-trophy" }),
                          _c("span", [_vm._v("trophy")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-tv-2",
                            expression: "'ni ni-tv-2'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-tv-2" }),
                          _c("span", [_vm._v("tv-2")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-umbrella-13",
                            expression: "'ni ni-umbrella-13'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-umbrella-13" }),
                          _c("span", [_vm._v("umbrella-13")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-user-run",
                            expression: "'ni ni-user-run'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-user-run" }),
                          _c("span", [_vm._v("user-run")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-vector",
                            expression: "'ni ni-vector'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-vector" }),
                          _c("span", [_vm._v("vector")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-watch-time",
                            expression: "'ni ni-watch-time'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-watch-time" }),
                          _c("span", [_vm._v("watch-time")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-world",
                            expression: "'ni ni-world'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-world" }),
                          _c("span", [_vm._v("world")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-zoom-split-in",
                            expression: "'ni ni-zoom-split-in'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-zoom-split-in" }),
                          _c("span", [_vm._v("zoom-split-in")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-collection",
                            expression: "'ni ni-collection'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-collection" }),
                          _c("span", [_vm._v("collection")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-image",
                            expression: "'ni ni-image'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-image" }),
                          _c("span", [_vm._v("image")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-shop",
                            expression: "'ni ni-shop'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-shop" }),
                          _c("span", [_vm._v("shop")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-ungroup",
                            expression: "'ni ni-ungroup'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-ungroup" }),
                          _c("span", [_vm._v("ungroup")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-world-2",
                            expression: "'ni ni-world-2'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-world-2" }),
                          _c("span", [_vm._v("world-2")])
                        ])
                      ]
                    )
                  ]),
                  _c("div", { staticClass: "col-lg-3 col-md-6" }, [
                    _c(
                      "button",
                      {
                        directives: [
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:copy",
                            value: "ni ni-ui-04",
                            expression: "'ni ni-ui-04'",
                            arg: "copy"
                          },
                          {
                            name: "clipboard",
                            rawName: "v-clipboard:success",
                            value: _vm.onCopy,
                            expression: "onCopy",
                            arg: "success"
                          }
                        ],
                        staticClass: "btn-icon-clipboard",
                        attrs: {
                          type: "button",
                          title: "",
                          "data-original-title": "Copy to clipboard"
                        }
                      },
                      [
                        _c("div", [
                          _c("i", { staticClass: "ni ni-ui-04" }),
                          _c("span", [_vm._v("ui-04")])
                        ])
                      ]
                    )
                  ])
                ])
              ])
            ],
            1
          )
        ])
      ])
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}